!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
DLLEXPORT	src/enigma.h	/^#define DLLEXPORT /;"	d
DLLEXPORT	src/enigma.h	/^#define DLLEXPORT$/;"	d
ENIGMA_ENIGMA_H	src/enigma.h	/^#define ENIGMA_ENIGMA_H$/;"	d
ENIGMA_FREE	src/enigma.h	/^#define ENIGMA_FREE /;"	d
ENIGMA_MALLOC	src/enigma.h	/^#define ENIGMA_MALLOC /;"	d
_enigma_machine_encode_one	src/enigma.c	/^uint8_t _enigma_machine_encode_one(enigma_machine_t* self, uint8_t byte) {$/;"	f	typeref:typename:uint8_t
_enigma_machine_get_replaced_byte	src/enigma.c	/^uint8_t _enigma_machine_get_replaced_byte(enigma_machine_t* self, uint8_t byte) {$/;"	f	typeref:typename:uint8_t
_get_inverse_map	src/enigma.c	/^void _get_inverse_map(const replace_map map, replace_map target) {$/;"	f	typeref:typename:void
_random_shuffle	src/enigma.c	/^void _random_shuffle(replace_map map) {$/;"	f	typeref:typename:void
enigma_machine_del	src/enigma.c	/^void enigma_machine_del(enigma_machine_t* self) {$/;"	f	typeref:typename:void
enigma_machine_encode_inplace	src/enigma.c	/^void enigma_machine_encode_inplace(enigma_machine_t* self, uint8_t* data, size_t len) {$/;"	f	typeref:typename:void
enigma_machine_encode_into	src/enigma.c	/^void enigma_machine_encode_into(enigma_machine_t* self, const uint8_t* data, size_t len, uint8_t/;"	f	typeref:typename:void
enigma_machine_new	src/enigma.c	/^enigma_machine_new(const uint8_t* maps, size_t rollers_count) {$/;"	f	typeref:typename:enigma_machine_t *
enigma_machine_roll	src/enigma.c	/^void enigma_machine_roll(enigma_machine_t* self, size_t idx, int count) {$/;"	f	typeref:typename:void
enigma_machine_s	src/enigma.h	/^typedef struct enigma_machine_s {$/;"	s
enigma_machine_t	src/enigma.h	/^} enigma_machine_t;$/;"	t	typeref:struct:enigma_machine_s
enigma_machine_test_reflect	src/enigma.c	/^bool enigma_machine_test_reflect(enigma_machine_t* self) {$/;"	f	typeref:typename:bool
enigma_machine_test_replace	src/enigma.c	/^bool enigma_machine_test_replace(enigma_machine_t* self) {$/;"	f	typeref:typename:bool
forward_maps	src/enigma.h	/^    replace_map *forward_maps, *reverse_maps;$/;"	m	struct:enigma_machine_s	typeref:typename:replace_map *
main	tests/test.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
map	tests/test.c	/^static uint8_t map[] = {$/;"	v	typeref:typename:uint8_t[]	file:
reflect	tests/test.c	/^uint8_t reflect(void *ud, uint8_t c)$/;"	f	typeref:typename:uint8_t
reflect_key	src/enigma.h	/^    uint8_t reflect_key;$/;"	m	struct:enigma_machine_s	typeref:typename:uint8_t
replace	tests/test.c	/^uint8_t replace(void *ud, uint8_t c)$/;"	f	typeref:typename:uint8_t
replace_map	src/enigma.h	/^typedef uint8_t replace_map[256];$/;"	t	typeref:typename:uint8_t[256]
reverse_maps	src/enigma.h	/^    replace_map *forward_maps, *reverse_maps;$/;"	m	struct:enigma_machine_s	typeref:typename:replace_map **
roll_count	src/enigma.h	/^    uint8_t* roll_count;$/;"	m	struct:enigma_machine_s	typeref:typename:uint8_t *
rollers_count	src/enigma.h	/^    size_t rollers_count;$/;"	m	struct:enigma_machine_s	typeref:typename:size_t
swap	src/enigma.c	/^void swap(uint8_t* a, uint8_t* b) {$/;"	f	typeref:typename:void
